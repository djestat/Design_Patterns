import UIKit
import Foundation

/*
 Еще один классический пример: создание различных вариаций кофе (простой, с молоком, с сахаром, с молоком и сахаром, со сливками, с молоком, сахаром и сливками и т. д.) с помощью декорирования — вместо создания большого количества сабклассов кофе.
 Создайте протокол Coffee и класс SimpleCoffee, реализующий протокол Coffee. Создайте протокол CoffeeDecorator, который «наследуется» от протокола Coffee. Далее создайте реализации декоратора — Milk, Whip, Sugar и другие, которые будут ингредиентами, которые добавляют в кофе. В протоколе Coffee объявите переменную cost: Int — это цена кофе. Каждый ингредиент должен увеличивать цену кофе на свою стоимость. Реализуйте описанную систему объектов с помощью паттерна Decorator аналогично тому, как это было сделано на уроке.
 */

protocol Coffee: Protocol {
    func getCoffee()
}

class SimpleCoffee {
    let cost: Int = 100
}

protocol CoffeeDecorator: Coffee {
    
}



//
